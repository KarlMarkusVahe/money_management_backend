openapi: 3.0.2
info:
  title: Money management API
  version: 1.0.0
  description: This is a simple API for managing money
paths:
  /accounts:
    summary: Path used to manage the list of accounts.
    description: >-
      The REST endpoint/path used to list and create zero or more `Account` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `Account` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      tags:
        - /accounts
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Successful response.
        '409':
          content:
            text/html:
              examples:
                This email already exists in the system:
                  value: This email already exists in the system
          description: This email already exists in the system
      operationId: createAccount
      summary: Create a Account
      description: Creates a new instance of a `Account`.
  /sessions:
    summary: Path used to manage the list of sessions.
    description: >-
      The REST endpoint/path used to list and create zero or more `Session` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `Session` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      tags:
        - /sessions
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Successful response.
        '401':
          content:
            text/html:
              examples:
                Invalid token:
                  value: Invalid token
                'Authorization header format is Bearer {token}':
                  value: 'Authorization header format is Bearer {token}'
                Authorization header is required:
                  value: Authorization header is required
          description: Unauthorized
        '404':
          content:
            text/html:
              examples:
                Account not found:
                  value: Account not found
          description: The session existed but the associated user account does not exist any more.
      security:
        -
          Bearer: []
      operationId: createSession
      summary: Create a Session
      description: Creates a new instance of a `Session`.
    delete:
      tags:
        - /sessions
      responses:
        '204':
          description: Session deleted.
        '401':
          content:
            text/html:
              examples:
                Authorization header is required:
                  value: Authorization header is required
                'Authorization header format is Bearer {token}':
                  value: 'Authorization header format is Bearer {token}'
                Invalid token:
                  value: Invalid token
          description: Unauthorized
      security:
        -
          Bearer: []
      summary: Delete a Session
      description: Deletes `Session` of which ID is specified in the Authorization header
  /expenses:
    summary: Path used to manage list of expenses
    description: >-
      The REST endpoint/path used to list and create zero or more `Expenses` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - /expenses
      responses:
        '200':
          description: Response Succesful
      security:
        -
          Bearer: []
      summary: Show expenses
      description: Show a list of expenses
    post:
      requestBody:
        description: A new `Expenses` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expenses'
        required: true
      tags:
        - /expenses
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expenses'
          description: Succesful Response
        '400':
          content:
            text/xml:
              examples:
                Name is required:
                  value:
                    name: ''
                    amount: '1000'
                Amount is required:
                  value:
                    name: trans
                    amount: '0'
          description: Required field is missing
      security:
        -
          Bearer: []
      operationId: createExpenses
      summary: Create an expense
      description: Creates a new instance of a `Expenses`.
  /incomes:
    summary: Path used to manage list of incomes
    description: >-
      The REST endpoint/path used to list and create zero or more `Incomes` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - /incomes
      responses:
        '200':
          description: Response Succesful
      security:
        -
          Bearer: []
      summary: Show incomes
      description: Show a list of incomes
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Incomes'
        required: true
      tags:
        - /incomes
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incomes'
          description: Response Succesful
        '400':
          content:
            text/xml:
              examples:
                Name is required:
                  value:
                    name: ''
                    amount: '1000'
                amount is required:
                  value:
                    name: job
                    amount: '0'
          description: Required field is missing
      security:
        -
          Bearer: []
      operationId: createIncome
      summary: Create an income
      description: Creates a new instance of a `Incomes`.
components:
  schemas:
    Account:
      title: Root Type for Account
      description: ''
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: a
        password: a
    Session:
      title: Root Type for Session
      description: ''
      type: object
      properties:
        accountId:
          format: int32
          type: integer
        id:
          type: string
      example:
        accountId: 1
        id: 9a55ced0-a3c1-4ea0-aa7c-3cfa40000173
    Credentials:
      title: Root Type for Credentials
      description: ''
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: a
        password: a
    Expenses:
      description: ''
      required:
        - name
        - amount
      type: object
      properties:
        name:
          description: ''
          type: string
        amount:
          description: ''
          type: number
      example:
        name: trans
        amount: '1000'
    Incomes:
      title: Root Type for Income
      description: ''
      required:
        - amount
        - name
      type: object
      properties:
        name:
          type: string
        amount:
          type: number
      example:
        name: job
        amount: '1000'
  securitySchemes:
    Bearer:
      scheme: bearer
      type: http
tags:
  -
    name: /accounts
    description: ''
  -
    name: /sessions
    description: ''
